// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl-flink/flink.proto

#include "flyteidl-flink/flink.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2dflink_2fflink_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlinkJob_FlinkPropertiesEntry_DoNotUse_flyteidl_2dflink_2fflink_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2dflink_2fflink_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JobExecutionInfo_flyteidl_2dflink_2fflink_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2dflink_2fflink_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2dflink_2fflink_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JobManager_flyteidl_2dflink_2fflink_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2dflink_2fflink_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Resource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2dflink_2fflink_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TaskManager_flyteidl_2dflink_2fflink_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2dflink_2fflink_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Resource_flyteidl_2dflink_2fflink_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_k8s_2eio_2fapimachinery_2fpkg_2fapi_2fresource_2fgenerated_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quantity_k8s_2eio_2fapimachinery_2fpkg_2fapi_2fresource_2fgenerated_2eproto;
namespace flyteidl_flink {
class Resource_PersistentVolumeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Resource_PersistentVolume> _instance;
} _Resource_PersistentVolume_default_instance_;
class ResourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Resource> _instance;
} _Resource_default_instance_;
class JobManagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobManager> _instance;
} _JobManager_default_instance_;
class TaskManagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskManager> _instance;
} _TaskManager_default_instance_;
class FlinkJob_FlinkPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlinkJob_FlinkPropertiesEntry_DoNotUse> _instance;
} _FlinkJob_FlinkPropertiesEntry_DoNotUse_default_instance_;
class FlinkJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlinkJob> _instance;
} _FlinkJob_default_instance_;
class JobExecutionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobExecutionInfo> _instance;
} _JobExecutionInfo_default_instance_;
class JobManagerExecutionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobManagerExecutionInfo> _instance;
} _JobManagerExecutionInfo_default_instance_;
class FlinkExecutionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlinkExecutionInfo> _instance;
} _FlinkExecutionInfo_default_instance_;
}  // namespace flyteidl_flink
static void InitDefaultsResource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_Resource_PersistentVolume_default_instance_;
    new (ptr) ::flyteidl_flink::Resource_PersistentVolume();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::Resource_PersistentVolume::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Resource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto}, {
      &scc_info_Quantity_k8s_2eio_2fapimachinery_2fpkg_2fapi_2fresource_2fgenerated_2eproto.base,}};

static void InitDefaultsResource_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_Resource_default_instance_;
    new (ptr) ::flyteidl_flink::Resource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::Resource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Resource_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsResource_flyteidl_2dflink_2fflink_2eproto}, {
      &scc_info_Quantity_k8s_2eio_2fapimachinery_2fpkg_2fapi_2fresource_2fgenerated_2eproto.base,
      &scc_info_Resource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto.base,}};

static void InitDefaultsJobManager_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_JobManager_default_instance_;
    new (ptr) ::flyteidl_flink::JobManager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::JobManager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JobManager_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJobManager_flyteidl_2dflink_2fflink_2eproto}, {
      &scc_info_Resource_flyteidl_2dflink_2fflink_2eproto.base,}};

static void InitDefaultsTaskManager_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_TaskManager_default_instance_;
    new (ptr) ::flyteidl_flink::TaskManager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::TaskManager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskManager_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskManager_flyteidl_2dflink_2fflink_2eproto}, {
      &scc_info_Resource_flyteidl_2dflink_2fflink_2eproto.base,}};

static void InitDefaultsFlinkJob_FlinkPropertiesEntry_DoNotUse_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_FlinkJob_FlinkPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse();
  }
  ::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlinkJob_FlinkPropertiesEntry_DoNotUse_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlinkJob_FlinkPropertiesEntry_DoNotUse_flyteidl_2dflink_2fflink_2eproto}, {}};

static void InitDefaultsFlinkJob_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_FlinkJob_default_instance_;
    new (ptr) ::flyteidl_flink::FlinkJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::FlinkJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_FlinkJob_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFlinkJob_flyteidl_2dflink_2fflink_2eproto}, {
      &scc_info_FlinkJob_FlinkPropertiesEntry_DoNotUse_flyteidl_2dflink_2fflink_2eproto.base,
      &scc_info_JobManager_flyteidl_2dflink_2fflink_2eproto.base,
      &scc_info_TaskManager_flyteidl_2dflink_2fflink_2eproto.base,}};

static void InitDefaultsJobExecutionInfo_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_JobExecutionInfo_default_instance_;
    new (ptr) ::flyteidl_flink::JobExecutionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::JobExecutionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JobExecutionInfo_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJobExecutionInfo_flyteidl_2dflink_2fflink_2eproto}, {}};

static void InitDefaultsJobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_JobManagerExecutionInfo_default_instance_;
    new (ptr) ::flyteidl_flink::JobManagerExecutionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::JobManagerExecutionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto}, {}};

static void InitDefaultsFlinkExecutionInfo_flyteidl_2dflink_2fflink_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl_flink::_FlinkExecutionInfo_default_instance_;
    new (ptr) ::flyteidl_flink::FlinkExecutionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl_flink::FlinkExecutionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FlinkExecutionInfo_flyteidl_2dflink_2fflink_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFlinkExecutionInfo_flyteidl_2dflink_2fflink_2eproto}, {
      &scc_info_JobExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base,
      &scc_info_JobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base,}};

void InitDefaults_flyteidl_2dflink_2fflink_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Resource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Resource_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobManager_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskManager_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlinkJob_FlinkPropertiesEntry_DoNotUse_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlinkJob_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlinkExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2dflink_2fflink_2eproto[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2dflink_2fflink_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2dflink_2fflink_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2dflink_2fflink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::Resource_PersistentVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::Resource_PersistentVolume, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::Resource_PersistentVolume, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::Resource, cpu_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::Resource, memory_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::Resource, persistentvolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::JobManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::JobManager, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::TaskManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::TaskManager, resource_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::TaskManager, replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, jarfile_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, mainclass_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, args_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, flinkproperties_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, jobmanager_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, taskmanager_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, serviceaccount_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkJob, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::JobExecutionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::JobExecutionInfo, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::JobManagerExecutionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::JobManagerExecutionInfo, ingressurls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkExecutionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkExecutionInfo, job_),
  PROTOBUF_FIELD_OFFSET(::flyteidl_flink::FlinkExecutionInfo, jobmanager_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl_flink::Resource_PersistentVolume)},
  { 7, -1, sizeof(::flyteidl_flink::Resource)},
  { 15, -1, sizeof(::flyteidl_flink::JobManager)},
  { 21, -1, sizeof(::flyteidl_flink::TaskManager)},
  { 28, 35, sizeof(::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse)},
  { 37, -1, sizeof(::flyteidl_flink::FlinkJob)},
  { 50, -1, sizeof(::flyteidl_flink::JobExecutionInfo)},
  { 56, -1, sizeof(::flyteidl_flink::JobManagerExecutionInfo)},
  { 62, -1, sizeof(::flyteidl_flink::FlinkExecutionInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_Resource_PersistentVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_Resource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_JobManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_TaskManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_FlinkJob_FlinkPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_FlinkJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_JobExecutionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_JobManagerExecutionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl_flink::_FlinkExecutionInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto = {
  {}, AddDescriptors_flyteidl_2dflink_2fflink_2eproto, "flyteidl-flink/flink.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2dflink_2fflink_2eproto::offsets,
  file_level_metadata_flyteidl_2dflink_2fflink_2eproto, 9, file_level_enum_descriptors_flyteidl_2dflink_2fflink_2eproto, file_level_service_descriptors_flyteidl_2dflink_2fflink_2eproto,
};

const char descriptor_table_protodef_flyteidl_2dflink_2fflink_2eproto[] =
  "\n\032flyteidl-flink/flink.proto\022\016flyteidl_f"
  "link\0324k8s.io/apimachinery/pkg/api/resour"
  "ce/generated.proto\"\202\003\n\010Resource\022;\n\003cpu\030\001"
  " \001(\0132..k8s.io.apimachinery.pkg.api.resou"
  "rce.Quantity\022>\n\006memory\030\002 \001(\0132..k8s.io.ap"
  "imachinery.pkg.api.resource.Quantity\022C\n\020"
  "persistentVolume\030\003 \001(\0132).flyteidl_flink."
  "Resource.PersistentVolume\032\263\001\n\020Persistent"
  "Volume\022<\n\004type\030\001 \001(\0162..flyteidl_flink.Re"
  "source.PersistentVolume.Type\022<\n\004size\030\002 \001"
  "(\0132..k8s.io.apimachinery.pkg.api.resourc"
  "e.Quantity\"#\n\004Type\022\017\n\013PD_STANDARD\020\000\022\n\n\006P"
  "D_SSD\020\001\"8\n\nJobManager\022*\n\010resource\030\001 \001(\0132"
  "\030.flyteidl_flink.Resource\"K\n\013TaskManager"
  "\022*\n\010resource\030\001 \001(\0132\030.flyteidl_flink.Reso"
  "urce\022\020\n\010replicas\030\002 \001(\005\"\305\002\n\010FlinkJob\022\017\n\007j"
  "arFile\030\001 \001(\t\022\021\n\tmainClass\030\002 \001(\t\022\014\n\004args\030"
  "\003 \003(\t\022F\n\017flinkProperties\030\004 \003(\0132-.flyteid"
  "l_flink.FlinkJob.FlinkPropertiesEntry\022.\n"
  "\njobManager\030\005 \001(\0132\032.flyteidl_flink.JobMa"
  "nager\0220\n\013taskManager\030\006 \001(\0132\033.flyteidl_fl"
  "ink.TaskManager\022\026\n\016serviceAccount\030\007 \001(\t\022"
  "\r\n\005image\030\010 \001(\t\0326\n\024FlinkPropertiesEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\036\n\020JobExe"
  "cutionInfo\022\n\n\002id\030\001 \001(\t\".\n\027JobManagerExec"
  "utionInfo\022\023\n\013ingressURLs\030\001 \003(\t\"\200\001\n\022Flink"
  "ExecutionInfo\022-\n\003job\030\001 \001(\0132 .flyteidl_fl"
  "ink.JobExecutionInfo\022;\n\njobManager\030\002 \001(\013"
  "2\'.flyteidl_flink.JobManagerExecutionInf"
  "oB@Z>github.com/spotify/flyte-flink-plug"
  "in/gen/pb-go/flyteidl-flinkb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2dflink_2fflink_2eproto = {
  false, InitDefaults_flyteidl_2dflink_2fflink_2eproto, 
  descriptor_table_protodef_flyteidl_2dflink_2fflink_2eproto,
  "flyteidl-flink/flink.proto", &assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto, 1235,
};

void AddDescriptors_flyteidl_2dflink_2fflink_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_k8s_2eio_2fapimachinery_2fpkg_2fapi_2fresource_2fgenerated_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2dflink_2fflink_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2dflink_2fflink_2eproto = []() { AddDescriptors_flyteidl_2dflink_2fflink_2eproto(); return true; }();
namespace flyteidl_flink {
const ::google::protobuf::EnumDescriptor* Resource_PersistentVolume_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return file_level_enum_descriptors_flyteidl_2dflink_2fflink_2eproto[0];
}
bool Resource_PersistentVolume_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Resource_PersistentVolume_Type Resource_PersistentVolume::PD_STANDARD;
const Resource_PersistentVolume_Type Resource_PersistentVolume::PD_SSD;
const Resource_PersistentVolume_Type Resource_PersistentVolume::Type_MIN;
const Resource_PersistentVolume_Type Resource_PersistentVolume::Type_MAX;
const int Resource_PersistentVolume::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Resource_PersistentVolume::InitAsDefaultInstance() {
  ::flyteidl_flink::_Resource_PersistentVolume_default_instance_._instance.get_mutable()->size_ = const_cast< ::k8s::io::apimachinery::pkg::api::resource::Quantity*>(
      ::k8s::io::apimachinery::pkg::api::resource::Quantity::internal_default_instance());
}
class Resource_PersistentVolume::HasBitSetters {
 public:
  static const ::k8s::io::apimachinery::pkg::api::resource::Quantity& size(const Resource_PersistentVolume* msg);
};

const ::k8s::io::apimachinery::pkg::api::resource::Quantity&
Resource_PersistentVolume::HasBitSetters::size(const Resource_PersistentVolume* msg) {
  return *msg->size_;
}
void Resource_PersistentVolume::clear_size() {
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resource_PersistentVolume::kTypeFieldNumber;
const int Resource_PersistentVolume::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resource_PersistentVolume::Resource_PersistentVolume()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.Resource.PersistentVolume)
}
Resource_PersistentVolume::Resource_PersistentVolume(const Resource_PersistentVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_size()) {
    size_ = new ::k8s::io::apimachinery::pkg::api::resource::Quantity(*from.size_);
  } else {
    size_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.Resource.PersistentVolume)
}

void Resource_PersistentVolume::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Resource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto.base);
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(type_));
}

Resource_PersistentVolume::~Resource_PersistentVolume() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.Resource.PersistentVolume)
  SharedDtor();
}

void Resource_PersistentVolume::SharedDtor() {
  if (this != internal_default_instance()) delete size_;
}

void Resource_PersistentVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resource_PersistentVolume& Resource_PersistentVolume::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Resource_PersistentVolume_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void Resource_PersistentVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.Resource.PersistentVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Resource_PersistentVolume::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Resource_PersistentVolume*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl_flink.Resource.PersistentVolume.Type type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::flyteidl_flink::Resource_PersistentVolume_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .k8s.io.apimachinery.pkg.api.resource.Quantity size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::k8s::io::apimachinery::pkg::api::resource::Quantity::_InternalParse;
        object = msg->mutable_size();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Resource_PersistentVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.Resource.PersistentVolume)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl_flink.Resource.PersistentVolume.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::flyteidl_flink::Resource_PersistentVolume_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .k8s.io.apimachinery.pkg.api.resource.Quantity size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.Resource.PersistentVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.Resource.PersistentVolume)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Resource_PersistentVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.Resource.PersistentVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.Resource.PersistentVolume.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .k8s.io.apimachinery.pkg.api.resource.Quantity size = 2;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::size(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.Resource.PersistentVolume)
}

::google::protobuf::uint8* Resource_PersistentVolume::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.Resource.PersistentVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.Resource.PersistentVolume.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .k8s.io.apimachinery.pkg.api.resource.Quantity size = 2;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::size(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.Resource.PersistentVolume)
  return target;
}

size_t Resource_PersistentVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.Resource.PersistentVolume)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .k8s.io.apimachinery.pkg.api.resource.Quantity size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .flyteidl_flink.Resource.PersistentVolume.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resource_PersistentVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.Resource.PersistentVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const Resource_PersistentVolume* source =
      ::google::protobuf::DynamicCastToGenerated<Resource_PersistentVolume>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.Resource.PersistentVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.Resource.PersistentVolume)
    MergeFrom(*source);
  }
}

void Resource_PersistentVolume::MergeFrom(const Resource_PersistentVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.Resource.PersistentVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_size()) {
    mutable_size()->::k8s::io::apimachinery::pkg::api::resource::Quantity::MergeFrom(from.size());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Resource_PersistentVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.Resource.PersistentVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_PersistentVolume::CopyFrom(const Resource_PersistentVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.Resource.PersistentVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_PersistentVolume::IsInitialized() const {
  return true;
}

void Resource_PersistentVolume::Swap(Resource_PersistentVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resource_PersistentVolume::InternalSwap(Resource_PersistentVolume* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(size_, other->size_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Resource_PersistentVolume::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Resource::InitAsDefaultInstance() {
  ::flyteidl_flink::_Resource_default_instance_._instance.get_mutable()->cpu_ = const_cast< ::k8s::io::apimachinery::pkg::api::resource::Quantity*>(
      ::k8s::io::apimachinery::pkg::api::resource::Quantity::internal_default_instance());
  ::flyteidl_flink::_Resource_default_instance_._instance.get_mutable()->memory_ = const_cast< ::k8s::io::apimachinery::pkg::api::resource::Quantity*>(
      ::k8s::io::apimachinery::pkg::api::resource::Quantity::internal_default_instance());
  ::flyteidl_flink::_Resource_default_instance_._instance.get_mutable()->persistentvolume_ = const_cast< ::flyteidl_flink::Resource_PersistentVolume*>(
      ::flyteidl_flink::Resource_PersistentVolume::internal_default_instance());
}
class Resource::HasBitSetters {
 public:
  static const ::k8s::io::apimachinery::pkg::api::resource::Quantity& cpu(const Resource* msg);
  static const ::k8s::io::apimachinery::pkg::api::resource::Quantity& memory(const Resource* msg);
  static const ::flyteidl_flink::Resource_PersistentVolume& persistentvolume(const Resource* msg);
};

const ::k8s::io::apimachinery::pkg::api::resource::Quantity&
Resource::HasBitSetters::cpu(const Resource* msg) {
  return *msg->cpu_;
}
const ::k8s::io::apimachinery::pkg::api::resource::Quantity&
Resource::HasBitSetters::memory(const Resource* msg) {
  return *msg->memory_;
}
const ::flyteidl_flink::Resource_PersistentVolume&
Resource::HasBitSetters::persistentvolume(const Resource* msg) {
  return *msg->persistentvolume_;
}
void Resource::clear_cpu() {
  if (GetArenaNoVirtual() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
}
void Resource::clear_memory() {
  if (GetArenaNoVirtual() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resource::kCpuFieldNumber;
const int Resource::kMemoryFieldNumber;
const int Resource::kPersistentVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resource::Resource()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.Resource)
}
Resource::Resource(const Resource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cpu()) {
    cpu_ = new ::k8s::io::apimachinery::pkg::api::resource::Quantity(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  if (from.has_memory()) {
    memory_ = new ::k8s::io::apimachinery::pkg::api::resource::Quantity(*from.memory_);
  } else {
    memory_ = nullptr;
  }
  if (from.has_persistentvolume()) {
    persistentvolume_ = new ::flyteidl_flink::Resource_PersistentVolume(*from.persistentvolume_);
  } else {
    persistentvolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.Resource)
}

void Resource::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Resource_flyteidl_2dflink_2fflink_2eproto.base);
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistentvolume_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(persistentvolume_));
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete memory_;
  if (this != internal_default_instance()) delete persistentvolume_;
}

void Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resource& Resource::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Resource_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.Resource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && persistentvolume_ != nullptr) {
    delete persistentvolume_;
  }
  persistentvolume_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Resource::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Resource*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .k8s.io.apimachinery.pkg.api.resource.Quantity cpu = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::k8s::io::apimachinery::pkg::api::resource::Quantity::_InternalParse;
        object = msg->mutable_cpu();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .k8s.io.apimachinery.pkg.api.resource.Quantity memory = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::k8s::io::apimachinery::pkg::api::resource::Quantity::_InternalParse;
        object = msg->mutable_memory();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl_flink.Resource.PersistentVolume persistentVolume = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl_flink::Resource_PersistentVolume::_InternalParse;
        object = msg->mutable_persistentvolume();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.Resource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .k8s.io.apimachinery.pkg.api.resource.Quantity cpu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .k8s.io.apimachinery.pkg.api.resource.Quantity memory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl_flink.Resource.PersistentVolume persistentVolume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_persistentvolume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.Resource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.Resource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .k8s.io.apimachinery.pkg.api.resource.Quantity cpu = 1;
  if (this->has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cpu(this), output);
  }

  // .k8s.io.apimachinery.pkg.api.resource.Quantity memory = 2;
  if (this->has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::memory(this), output);
  }

  // .flyteidl_flink.Resource.PersistentVolume persistentVolume = 3;
  if (this->has_persistentvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::persistentvolume(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.Resource)
}

::google::protobuf::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.Resource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .k8s.io.apimachinery.pkg.api.resource.Quantity cpu = 1;
  if (this->has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cpu(this), target);
  }

  // .k8s.io.apimachinery.pkg.api.resource.Quantity memory = 2;
  if (this->has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::memory(this), target);
  }

  // .flyteidl_flink.Resource.PersistentVolume persistentVolume = 3;
  if (this->has_persistentvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::persistentvolume(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.Resource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .k8s.io.apimachinery.pkg.api.resource.Quantity cpu = 1;
  if (this->has_cpu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cpu_);
  }

  // .k8s.io.apimachinery.pkg.api.resource.Quantity memory = 2;
  if (this->has_memory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *memory_);
  }

  // .flyteidl_flink.Resource.PersistentVolume persistentVolume = 3;
  if (this->has_persistentvolume()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *persistentvolume_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const Resource* source =
      ::google::protobuf::DynamicCastToGenerated<Resource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.Resource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cpu()) {
    mutable_cpu()->::k8s::io::apimachinery::pkg::api::resource::Quantity::MergeFrom(from.cpu());
  }
  if (from.has_memory()) {
    mutable_memory()->::k8s::io::apimachinery::pkg::api::resource::Quantity::MergeFrom(from.memory());
  }
  if (from.has_persistentvolume()) {
    mutable_persistentvolume()->::flyteidl_flink::Resource_PersistentVolume::MergeFrom(from.persistentvolume());
  }
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::Swap(Resource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resource::InternalSwap(Resource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cpu_, other->cpu_);
  swap(memory_, other->memory_);
  swap(persistentvolume_, other->persistentvolume_);
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JobManager::InitAsDefaultInstance() {
  ::flyteidl_flink::_JobManager_default_instance_._instance.get_mutable()->resource_ = const_cast< ::flyteidl_flink::Resource*>(
      ::flyteidl_flink::Resource::internal_default_instance());
}
class JobManager::HasBitSetters {
 public:
  static const ::flyteidl_flink::Resource& resource(const JobManager* msg);
};

const ::flyteidl_flink::Resource&
JobManager::HasBitSetters::resource(const JobManager* msg) {
  return *msg->resource_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobManager::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobManager::JobManager()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.JobManager)
}
JobManager::JobManager(const JobManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::flyteidl_flink::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.JobManager)
}

void JobManager::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JobManager_flyteidl_2dflink_2fflink_2eproto.base);
  resource_ = nullptr;
}

JobManager::~JobManager() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.JobManager)
  SharedDtor();
}

void JobManager::SharedDtor() {
  if (this != internal_default_instance()) delete resource_;
}

void JobManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobManager& JobManager::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JobManager_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void JobManager::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.JobManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobManager::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JobManager*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl_flink.Resource resource = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl_flink::Resource::_InternalParse;
        object = msg->mutable_resource();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.JobManager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl_flink.Resource resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.JobManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.JobManager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.JobManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.Resource resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::resource(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.JobManager)
}

::google::protobuf::uint8* JobManager::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.JobManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.Resource resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::resource(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.JobManager)
  return target;
}

size_t JobManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.JobManager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl_flink.Resource resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.JobManager)
  GOOGLE_DCHECK_NE(&from, this);
  const JobManager* source =
      ::google::protobuf::DynamicCastToGenerated<JobManager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.JobManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.JobManager)
    MergeFrom(*source);
  }
}

void JobManager::MergeFrom(const JobManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.JobManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::flyteidl_flink::Resource::MergeFrom(from.resource());
  }
}

void JobManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.JobManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobManager::CopyFrom(const JobManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.JobManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobManager::IsInitialized() const {
  return true;
}

void JobManager::Swap(JobManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobManager::InternalSwap(JobManager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resource_, other->resource_);
}

::google::protobuf::Metadata JobManager::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskManager::InitAsDefaultInstance() {
  ::flyteidl_flink::_TaskManager_default_instance_._instance.get_mutable()->resource_ = const_cast< ::flyteidl_flink::Resource*>(
      ::flyteidl_flink::Resource::internal_default_instance());
}
class TaskManager::HasBitSetters {
 public:
  static const ::flyteidl_flink::Resource& resource(const TaskManager* msg);
};

const ::flyteidl_flink::Resource&
TaskManager::HasBitSetters::resource(const TaskManager* msg) {
  return *msg->resource_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskManager::kResourceFieldNumber;
const int TaskManager::kReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskManager::TaskManager()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.TaskManager)
}
TaskManager::TaskManager(const TaskManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::flyteidl_flink::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  replicas_ = from.replicas_;
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.TaskManager)
}

void TaskManager::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskManager_flyteidl_2dflink_2fflink_2eproto.base);
  ::memset(&resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicas_) -
      reinterpret_cast<char*>(&resource_)) + sizeof(replicas_));
}

TaskManager::~TaskManager() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.TaskManager)
  SharedDtor();
}

void TaskManager::SharedDtor() {
  if (this != internal_default_instance()) delete resource_;
}

void TaskManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskManager& TaskManager::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskManager_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void TaskManager::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.TaskManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  replicas_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskManager::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskManager*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl_flink.Resource resource = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl_flink::Resource::_InternalParse;
        object = msg->mutable_resource();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 replicas = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_replicas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.TaskManager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl_flink.Resource resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replicas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.TaskManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.TaskManager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.TaskManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.Resource resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::resource(this), output);
  }

  // int32 replicas = 2;
  if (this->replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replicas(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.TaskManager)
}

::google::protobuf::uint8* TaskManager::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.TaskManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.Resource resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::resource(this), target);
  }

  // int32 replicas = 2;
  if (this->replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replicas(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.TaskManager)
  return target;
}

size_t TaskManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.TaskManager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl_flink.Resource resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  // int32 replicas = 2;
  if (this->replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.TaskManager)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskManager* source =
      ::google::protobuf::DynamicCastToGenerated<TaskManager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.TaskManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.TaskManager)
    MergeFrom(*source);
  }
}

void TaskManager::MergeFrom(const TaskManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.TaskManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::flyteidl_flink::Resource::MergeFrom(from.resource());
  }
  if (from.replicas() != 0) {
    set_replicas(from.replicas());
  }
}

void TaskManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.TaskManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskManager::CopyFrom(const TaskManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.TaskManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskManager::IsInitialized() const {
  return true;
}

void TaskManager::Swap(TaskManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskManager::InternalSwap(TaskManager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resource_, other->resource_);
  swap(replicas_, other->replicas_);
}

::google::protobuf::Metadata TaskManager::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// ===================================================================

FlinkJob_FlinkPropertiesEntry_DoNotUse::FlinkJob_FlinkPropertiesEntry_DoNotUse() {}
FlinkJob_FlinkPropertiesEntry_DoNotUse::FlinkJob_FlinkPropertiesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void FlinkJob_FlinkPropertiesEntry_DoNotUse::MergeFrom(const FlinkJob_FlinkPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FlinkJob_FlinkPropertiesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[4];
}
void FlinkJob_FlinkPropertiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlinkJob_FlinkPropertiesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      FlinkJob_FlinkPropertiesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void FlinkJob::InitAsDefaultInstance() {
  ::flyteidl_flink::_FlinkJob_default_instance_._instance.get_mutable()->jobmanager_ = const_cast< ::flyteidl_flink::JobManager*>(
      ::flyteidl_flink::JobManager::internal_default_instance());
  ::flyteidl_flink::_FlinkJob_default_instance_._instance.get_mutable()->taskmanager_ = const_cast< ::flyteidl_flink::TaskManager*>(
      ::flyteidl_flink::TaskManager::internal_default_instance());
}
class FlinkJob::HasBitSetters {
 public:
  static const ::flyteidl_flink::JobManager& jobmanager(const FlinkJob* msg);
  static const ::flyteidl_flink::TaskManager& taskmanager(const FlinkJob* msg);
};

const ::flyteidl_flink::JobManager&
FlinkJob::HasBitSetters::jobmanager(const FlinkJob* msg) {
  return *msg->jobmanager_;
}
const ::flyteidl_flink::TaskManager&
FlinkJob::HasBitSetters::taskmanager(const FlinkJob* msg) {
  return *msg->taskmanager_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlinkJob::kJarFileFieldNumber;
const int FlinkJob::kMainClassFieldNumber;
const int FlinkJob::kArgsFieldNumber;
const int FlinkJob::kFlinkPropertiesFieldNumber;
const int FlinkJob::kJobManagerFieldNumber;
const int FlinkJob::kTaskManagerFieldNumber;
const int FlinkJob::kServiceAccountFieldNumber;
const int FlinkJob::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlinkJob::FlinkJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.FlinkJob)
}
FlinkJob::FlinkJob(const FlinkJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flinkproperties_.MergeFrom(from.flinkproperties_);
  jarfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jarfile().size() > 0) {
    jarfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jarfile_);
  }
  mainclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mainclass().size() > 0) {
    mainclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainclass_);
  }
  serviceaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serviceaccount().size() > 0) {
    serviceaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceaccount_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_jobmanager()) {
    jobmanager_ = new ::flyteidl_flink::JobManager(*from.jobmanager_);
  } else {
    jobmanager_ = nullptr;
  }
  if (from.has_taskmanager()) {
    taskmanager_ = new ::flyteidl_flink::TaskManager(*from.taskmanager_);
  } else {
    taskmanager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.FlinkJob)
}

void FlinkJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FlinkJob_flyteidl_2dflink_2fflink_2eproto.base);
  jarfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&jobmanager_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskmanager_) -
      reinterpret_cast<char*>(&jobmanager_)) + sizeof(taskmanager_));
}

FlinkJob::~FlinkJob() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.FlinkJob)
  SharedDtor();
}

void FlinkJob::SharedDtor() {
  jarfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete jobmanager_;
  if (this != internal_default_instance()) delete taskmanager_;
}

void FlinkJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlinkJob& FlinkJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlinkJob_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void FlinkJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.FlinkJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  flinkproperties_.Clear();
  jarfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && jobmanager_ != nullptr) {
    delete jobmanager_;
  }
  jobmanager_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taskmanager_ != nullptr) {
    delete taskmanager_;
  }
  taskmanager_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlinkJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlinkJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string jarFile = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl_flink.FlinkJob.jarFile");
        object = msg->mutable_jarfile();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string mainClass = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl_flink.FlinkJob.mainClass");
        object = msg->mutable_mainclass();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string args = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl_flink.FlinkJob.args");
          object = msg->add_args();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // map<string, string> flinkProperties = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->flinkproperties_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .flyteidl_flink.JobManager jobManager = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl_flink::JobManager::_InternalParse;
        object = msg->mutable_jobmanager();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl_flink.TaskManager taskManager = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl_flink::TaskManager::_InternalParse;
        object = msg->mutable_taskmanager();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string serviceAccount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl_flink.FlinkJob.serviceAccount");
        object = msg->mutable_serviceaccount();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string image = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl_flink.FlinkJob.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlinkJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.FlinkJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string jarFile = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jarfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jarfile().data(), static_cast<int>(this->jarfile().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.FlinkJob.jarFile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mainClass = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainclass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mainclass().data(), static_cast<int>(this->mainclass().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.FlinkJob.mainClass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args(this->args_size() - 1).data(),
            static_cast<int>(this->args(this->args_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.FlinkJob.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> flinkProperties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          FlinkJob_FlinkPropertiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FlinkJob_FlinkPropertiesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&flinkproperties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl_flink.JobManager jobManager = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jobmanager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl_flink.TaskManager taskManager = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_taskmanager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serviceAccount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serviceaccount().data(), static_cast<int>(this->serviceaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.FlinkJob.serviceAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.FlinkJob.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.FlinkJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.FlinkJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlinkJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.FlinkJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string jarFile = 1;
  if (this->jarfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jarfile().data(), static_cast<int>(this->jarfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.jarFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->jarfile(), output);
  }

  // string mainClass = 2;
  if (this->mainclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainclass().data(), static_cast<int>(this->mainclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.mainClass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mainclass(), output);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // map<string, string> flinkProperties = 4;
  if (!this->flinkproperties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->flinkproperties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->flinkproperties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->flinkproperties().begin();
          it != this->flinkproperties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlinkJob_FlinkPropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(flinkproperties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<FlinkJob_FlinkPropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->flinkproperties().begin();
          it != this->flinkproperties().end(); ++it) {
        entry.reset(flinkproperties_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .flyteidl_flink.JobManager jobManager = 5;
  if (this->has_jobmanager()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::jobmanager(this), output);
  }

  // .flyteidl_flink.TaskManager taskManager = 6;
  if (this->has_taskmanager()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::taskmanager(this), output);
  }

  // string serviceAccount = 7;
  if (this->serviceaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serviceaccount().data(), static_cast<int>(this->serviceaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.serviceAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serviceaccount(), output);
  }

  // string image = 8;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.FlinkJob)
}

::google::protobuf::uint8* FlinkJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.FlinkJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string jarFile = 1;
  if (this->jarfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jarfile().data(), static_cast<int>(this->jarfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.jarFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jarfile(), target);
  }

  // string mainClass = 2;
  if (this->mainclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainclass().data(), static_cast<int>(this->mainclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.mainClass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mainclass(), target);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // map<string, string> flinkProperties = 4;
  if (!this->flinkproperties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl_flink.FlinkJob.FlinkPropertiesEntry.value");
      }
    };

    if (false &&
        this->flinkproperties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->flinkproperties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->flinkproperties().begin();
          it != this->flinkproperties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlinkJob_FlinkPropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(flinkproperties_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<FlinkJob_FlinkPropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->flinkproperties().begin();
          it != this->flinkproperties().end(); ++it) {
        entry.reset(flinkproperties_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .flyteidl_flink.JobManager jobManager = 5;
  if (this->has_jobmanager()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::jobmanager(this), target);
  }

  // .flyteidl_flink.TaskManager taskManager = 6;
  if (this->has_taskmanager()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::taskmanager(this), target);
  }

  // string serviceAccount = 7;
  if (this->serviceaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serviceaccount().data(), static_cast<int>(this->serviceaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.serviceAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serviceaccount(), target);
  }

  // string image = 8;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.FlinkJob.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.FlinkJob)
  return target;
}

size_t FlinkJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.FlinkJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // map<string, string> flinkProperties = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->flinkproperties_size());
  {
    ::std::unique_ptr<FlinkJob_FlinkPropertiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->flinkproperties().begin();
        it != this->flinkproperties().end(); ++it) {
      entry.reset(flinkproperties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string jarFile = 1;
  if (this->jarfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jarfile());
  }

  // string mainClass = 2;
  if (this->mainclass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mainclass());
  }

  // string serviceAccount = 7;
  if (this->serviceaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceaccount());
  }

  // string image = 8;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .flyteidl_flink.JobManager jobManager = 5;
  if (this->has_jobmanager()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *jobmanager_);
  }

  // .flyteidl_flink.TaskManager taskManager = 6;
  if (this->has_taskmanager()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *taskmanager_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlinkJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.FlinkJob)
  GOOGLE_DCHECK_NE(&from, this);
  const FlinkJob* source =
      ::google::protobuf::DynamicCastToGenerated<FlinkJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.FlinkJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.FlinkJob)
    MergeFrom(*source);
  }
}

void FlinkJob::MergeFrom(const FlinkJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.FlinkJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  flinkproperties_.MergeFrom(from.flinkproperties_);
  if (from.jarfile().size() > 0) {

    jarfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jarfile_);
  }
  if (from.mainclass().size() > 0) {

    mainclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainclass_);
  }
  if (from.serviceaccount().size() > 0) {

    serviceaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceaccount_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_jobmanager()) {
    mutable_jobmanager()->::flyteidl_flink::JobManager::MergeFrom(from.jobmanager());
  }
  if (from.has_taskmanager()) {
    mutable_taskmanager()->::flyteidl_flink::TaskManager::MergeFrom(from.taskmanager());
  }
}

void FlinkJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.FlinkJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlinkJob::CopyFrom(const FlinkJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.FlinkJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlinkJob::IsInitialized() const {
  return true;
}

void FlinkJob::Swap(FlinkJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlinkJob::InternalSwap(FlinkJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_.InternalSwap(CastToBase(&other->args_));
  flinkproperties_.Swap(&other->flinkproperties_);
  jarfile_.Swap(&other->jarfile_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mainclass_.Swap(&other->mainclass_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serviceaccount_.Swap(&other->serviceaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(jobmanager_, other->jobmanager_);
  swap(taskmanager_, other->taskmanager_);
}

::google::protobuf::Metadata FlinkJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JobExecutionInfo::InitAsDefaultInstance() {
}
class JobExecutionInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobExecutionInfo::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobExecutionInfo::JobExecutionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.JobExecutionInfo)
}
JobExecutionInfo::JobExecutionInfo(const JobExecutionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.JobExecutionInfo)
}

void JobExecutionInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JobExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JobExecutionInfo::~JobExecutionInfo() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.JobExecutionInfo)
  SharedDtor();
}

void JobExecutionInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobExecutionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobExecutionInfo& JobExecutionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JobExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void JobExecutionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.JobExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobExecutionInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JobExecutionInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl_flink.JobExecutionInfo.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobExecutionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.JobExecutionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.JobExecutionInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.JobExecutionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.JobExecutionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobExecutionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.JobExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.JobExecutionInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.JobExecutionInfo)
}

::google::protobuf::uint8* JobExecutionInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.JobExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.JobExecutionInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.JobExecutionInfo)
  return target;
}

size_t JobExecutionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.JobExecutionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobExecutionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.JobExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JobExecutionInfo* source =
      ::google::protobuf::DynamicCastToGenerated<JobExecutionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.JobExecutionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.JobExecutionInfo)
    MergeFrom(*source);
  }
}

void JobExecutionInfo::MergeFrom(const JobExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.JobExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void JobExecutionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.JobExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobExecutionInfo::CopyFrom(const JobExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.JobExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobExecutionInfo::IsInitialized() const {
  return true;
}

void JobExecutionInfo::Swap(JobExecutionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobExecutionInfo::InternalSwap(JobExecutionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata JobExecutionInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JobManagerExecutionInfo::InitAsDefaultInstance() {
}
class JobManagerExecutionInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobManagerExecutionInfo::kIngressURLsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobManagerExecutionInfo::JobManagerExecutionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.JobManagerExecutionInfo)
}
JobManagerExecutionInfo::JobManagerExecutionInfo(const JobManagerExecutionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ingressurls_(from.ingressurls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.JobManagerExecutionInfo)
}

void JobManagerExecutionInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
}

JobManagerExecutionInfo::~JobManagerExecutionInfo() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.JobManagerExecutionInfo)
  SharedDtor();
}

void JobManagerExecutionInfo::SharedDtor() {
}

void JobManagerExecutionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobManagerExecutionInfo& JobManagerExecutionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JobManagerExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void JobManagerExecutionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.JobManagerExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingressurls_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobManagerExecutionInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JobManagerExecutionInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string ingressURLs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl_flink.JobManagerExecutionInfo.ingressURLs");
          object = msg->add_ingressurls();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobManagerExecutionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.JobManagerExecutionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ingressURLs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ingressurls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ingressurls(this->ingressurls_size() - 1).data(),
            static_cast<int>(this->ingressurls(this->ingressurls_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl_flink.JobManagerExecutionInfo.ingressURLs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.JobManagerExecutionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.JobManagerExecutionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobManagerExecutionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.JobManagerExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ingressURLs = 1;
  for (int i = 0, n = this->ingressurls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ingressurls(i).data(), static_cast<int>(this->ingressurls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.JobManagerExecutionInfo.ingressURLs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ingressurls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.JobManagerExecutionInfo)
}

::google::protobuf::uint8* JobManagerExecutionInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.JobManagerExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ingressURLs = 1;
  for (int i = 0, n = this->ingressurls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ingressurls(i).data(), static_cast<int>(this->ingressurls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl_flink.JobManagerExecutionInfo.ingressURLs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ingressurls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.JobManagerExecutionInfo)
  return target;
}

size_t JobManagerExecutionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.JobManagerExecutionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ingressURLs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ingressurls_size());
  for (int i = 0, n = this->ingressurls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ingressurls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobManagerExecutionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.JobManagerExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JobManagerExecutionInfo* source =
      ::google::protobuf::DynamicCastToGenerated<JobManagerExecutionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.JobManagerExecutionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.JobManagerExecutionInfo)
    MergeFrom(*source);
  }
}

void JobManagerExecutionInfo::MergeFrom(const JobManagerExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.JobManagerExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ingressurls_.MergeFrom(from.ingressurls_);
}

void JobManagerExecutionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.JobManagerExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobManagerExecutionInfo::CopyFrom(const JobManagerExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.JobManagerExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobManagerExecutionInfo::IsInitialized() const {
  return true;
}

void JobManagerExecutionInfo::Swap(JobManagerExecutionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobManagerExecutionInfo::InternalSwap(JobManagerExecutionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ingressurls_.InternalSwap(CastToBase(&other->ingressurls_));
}

::google::protobuf::Metadata JobManagerExecutionInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlinkExecutionInfo::InitAsDefaultInstance() {
  ::flyteidl_flink::_FlinkExecutionInfo_default_instance_._instance.get_mutable()->job_ = const_cast< ::flyteidl_flink::JobExecutionInfo*>(
      ::flyteidl_flink::JobExecutionInfo::internal_default_instance());
  ::flyteidl_flink::_FlinkExecutionInfo_default_instance_._instance.get_mutable()->jobmanager_ = const_cast< ::flyteidl_flink::JobManagerExecutionInfo*>(
      ::flyteidl_flink::JobManagerExecutionInfo::internal_default_instance());
}
class FlinkExecutionInfo::HasBitSetters {
 public:
  static const ::flyteidl_flink::JobExecutionInfo& job(const FlinkExecutionInfo* msg);
  static const ::flyteidl_flink::JobManagerExecutionInfo& jobmanager(const FlinkExecutionInfo* msg);
};

const ::flyteidl_flink::JobExecutionInfo&
FlinkExecutionInfo::HasBitSetters::job(const FlinkExecutionInfo* msg) {
  return *msg->job_;
}
const ::flyteidl_flink::JobManagerExecutionInfo&
FlinkExecutionInfo::HasBitSetters::jobmanager(const FlinkExecutionInfo* msg) {
  return *msg->jobmanager_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlinkExecutionInfo::kJobFieldNumber;
const int FlinkExecutionInfo::kJobManagerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlinkExecutionInfo::FlinkExecutionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl_flink.FlinkExecutionInfo)
}
FlinkExecutionInfo::FlinkExecutionInfo(const FlinkExecutionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job()) {
    job_ = new ::flyteidl_flink::JobExecutionInfo(*from.job_);
  } else {
    job_ = nullptr;
  }
  if (from.has_jobmanager()) {
    jobmanager_ = new ::flyteidl_flink::JobManagerExecutionInfo(*from.jobmanager_);
  } else {
    jobmanager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl_flink.FlinkExecutionInfo)
}

void FlinkExecutionInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FlinkExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
  ::memset(&job_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobmanager_) -
      reinterpret_cast<char*>(&job_)) + sizeof(jobmanager_));
}

FlinkExecutionInfo::~FlinkExecutionInfo() {
  // @@protoc_insertion_point(destructor:flyteidl_flink.FlinkExecutionInfo)
  SharedDtor();
}

void FlinkExecutionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete job_;
  if (this != internal_default_instance()) delete jobmanager_;
}

void FlinkExecutionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlinkExecutionInfo& FlinkExecutionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlinkExecutionInfo_flyteidl_2dflink_2fflink_2eproto.base);
  return *internal_default_instance();
}


void FlinkExecutionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl_flink.FlinkExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && jobmanager_ != nullptr) {
    delete jobmanager_;
  }
  jobmanager_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlinkExecutionInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlinkExecutionInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl_flink.JobExecutionInfo job = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl_flink::JobExecutionInfo::_InternalParse;
        object = msg->mutable_job();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl_flink.JobManagerExecutionInfo jobManager = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl_flink::JobManagerExecutionInfo::_InternalParse;
        object = msg->mutable_jobmanager();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlinkExecutionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl_flink.FlinkExecutionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl_flink.JobExecutionInfo job = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl_flink.JobManagerExecutionInfo jobManager = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jobmanager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl_flink.FlinkExecutionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl_flink.FlinkExecutionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlinkExecutionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl_flink.FlinkExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.JobExecutionInfo job = 1;
  if (this->has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::job(this), output);
  }

  // .flyteidl_flink.JobManagerExecutionInfo jobManager = 2;
  if (this->has_jobmanager()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::jobmanager(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl_flink.FlinkExecutionInfo)
}

::google::protobuf::uint8* FlinkExecutionInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl_flink.FlinkExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl_flink.JobExecutionInfo job = 1;
  if (this->has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::job(this), target);
  }

  // .flyteidl_flink.JobManagerExecutionInfo jobManager = 2;
  if (this->has_jobmanager()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::jobmanager(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl_flink.FlinkExecutionInfo)
  return target;
}

size_t FlinkExecutionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl_flink.FlinkExecutionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl_flink.JobExecutionInfo job = 1;
  if (this->has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_);
  }

  // .flyteidl_flink.JobManagerExecutionInfo jobManager = 2;
  if (this->has_jobmanager()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *jobmanager_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlinkExecutionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl_flink.FlinkExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FlinkExecutionInfo* source =
      ::google::protobuf::DynamicCastToGenerated<FlinkExecutionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl_flink.FlinkExecutionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl_flink.FlinkExecutionInfo)
    MergeFrom(*source);
  }
}

void FlinkExecutionInfo::MergeFrom(const FlinkExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl_flink.FlinkExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job()) {
    mutable_job()->::flyteidl_flink::JobExecutionInfo::MergeFrom(from.job());
  }
  if (from.has_jobmanager()) {
    mutable_jobmanager()->::flyteidl_flink::JobManagerExecutionInfo::MergeFrom(from.jobmanager());
  }
}

void FlinkExecutionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl_flink.FlinkExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlinkExecutionInfo::CopyFrom(const FlinkExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl_flink.FlinkExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlinkExecutionInfo::IsInitialized() const {
  return true;
}

void FlinkExecutionInfo::Swap(FlinkExecutionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlinkExecutionInfo::InternalSwap(FlinkExecutionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(job_, other->job_);
  swap(jobmanager_, other->jobmanager_);
}

::google::protobuf::Metadata FlinkExecutionInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2dflink_2fflink_2eproto);
  return ::file_level_metadata_flyteidl_2dflink_2fflink_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace flyteidl_flink
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl_flink::Resource_PersistentVolume* Arena::CreateMaybeMessage< ::flyteidl_flink::Resource_PersistentVolume >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::Resource_PersistentVolume >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::Resource* Arena::CreateMaybeMessage< ::flyteidl_flink::Resource >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::JobManager* Arena::CreateMaybeMessage< ::flyteidl_flink::JobManager >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::JobManager >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::TaskManager* Arena::CreateMaybeMessage< ::flyteidl_flink::TaskManager >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::TaskManager >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::FlinkJob_FlinkPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::FlinkJob* Arena::CreateMaybeMessage< ::flyteidl_flink::FlinkJob >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::FlinkJob >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::JobExecutionInfo* Arena::CreateMaybeMessage< ::flyteidl_flink::JobExecutionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::JobExecutionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::JobManagerExecutionInfo* Arena::CreateMaybeMessage< ::flyteidl_flink::JobManagerExecutionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::JobManagerExecutionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl_flink::FlinkExecutionInfo* Arena::CreateMaybeMessage< ::flyteidl_flink::FlinkExecutionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl_flink::FlinkExecutionInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
